{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/My posts/Post/Post.tsx","components/Profile/My posts/MyPosts.tsx","components/Profile/My posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileInfo","profile","className","s","backImg","src","descriptionBlock","photos","large","Preloader","Post","item","message","likeCount","maxLength30","maxLengthCreator","MyPosts","React","memo","console","log","postElements","posts","map","p","id","AddPostReduxForm","onSubmit","data","addPost","newPostText","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","requiredField","MyPostsContainer","connect","state","profilePage","postsData","dispatch","addPostActionCreator","Profile","content","ProfileContainer","userID","Number","this","match","params","userId","authorizedUserId","history","push","getUserProfile","getUserStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.73604ab8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__Q5pAt\",\"backImg\":\"Profile_backImg__42rJN\",\"item\":\"Profile_item__3Jc6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1CnlI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__39quH\",\"item\":\"Post_item__Rv6Rj\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    updateUserStatus: (status: string) => (profile: any) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const disableEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '------------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={disableEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React, {Component} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype PropsType = {\r\n    profile: any\r\n    updateUserStatus: (status: string) => (profile: any) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n\r\n    if(!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.backImg}>\r\n            <img src='https://static3.depositphotos.com/1000454/256/i/600/depositphotos_2567474-stock-photo-wide-panorama-of-french-alps.jpg'/>\r\n        </div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large} />\r\n            <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {postsType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\nconst Post = (props: postsType) => {\r\n    return <div className={s.item}>\r\n        <img src='https://topmsg.ru/wp-content/uploads/anonymous.jpg'/>\r\n        {props.message}\r\n        <div>\r\n            <span>Likes = {props.likeCount}</span>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {postsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/preloader/formsControl/FormsControls\";\r\n\r\nconst maxLength30 = maxLengthCreator(10);\r\n\r\ntype myPostPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<postsType>\r\n}\r\n\r\ntype AddPostPropsType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: myPostPropsType) => {\r\n\r\n    console.log('Render MyPosts')\r\n\r\n    let postElements = props.posts.map((p: postsType) => <Post id={p.id} message={p.message}\r\n                                                               likeCount={p.likeCount}/>)\r\n\r\n    let addNewPost = (data: AddPostPropsType) => {\r\n        props.addPost(data.newPostText)\r\n    }\r\n\r\n    return <div>\r\n        <h3>My posts</h3>\r\n        <AddPostReduxForm onSubmit={addNewPost}/>\r\n        <div className={s.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>\r\n})\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostPropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder='Enter, what you want to say...'\r\n                       name={'newPostText'}\r\n                       component={Textarea}\r\n                       validate={[requiredField, maxLength30]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = reduxForm<AddPostPropsType>({\r\n    form: 'profileAddPostForm'\r\n})(AddPostForm)\r\n\r\n\r\nexport default MyPosts;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {addPostActionCreator, postsType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from 'redux';\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<postsType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My posts/MyPostsContainer\";\r\n\r\ntype PropsType = {\r\n    getUserProfile: (userID: number) => (profile: any) => void\r\n    profile: any\r\n    updateUserStatus: (status: string) => (profile: any) => void\r\n    status: string\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return <div className={s.content}>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\ntype PropsType = {\r\n    getUserProfile: (userID: number) => (profile: any) => void\r\n    getUserStatus:(userID: number) => (profile: any) => void\r\n    updateUserStatus: (status: string) => (profile: any) => void\r\n    profile: any\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & PropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userID = Number(this.props.match.params.userId);\r\n        if(!userID) {\r\n            userID = this.props.authorizedUserId;\r\n            if(!userID) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getUserStatus(userID)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}\r\n\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => (\r\n    {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}