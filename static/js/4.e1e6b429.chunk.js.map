{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogsItem","props","className","s","item","activeItem","container","avatarDialogs","src","avatar","alt","nameOfSender","to","id","name","Message","containerMessage","messageItem","imgBlock","avatarMessages","messageBlock","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","inputMessageBlock","Field","placeholder","inputMessage","component","Textarea","validate","requiredField","sendMessage","Dialogs","dialogsElements","dialogsPage","dialogsData","map","d","messagesElements","messageData","m","isAuth","globalDialogs","dialogsItem","messages","data","newMessageText","mapStateToProps","state","auth","compose","connect","dispatch","addMessageActionCreator","Component","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,cAAgB,+BAA+B,KAAO,sBAAsB,WAAa,4BAA4B,YAAc,6BAA6B,cAAgB,+BAA+B,eAAiB,gCAAgC,aAAe,8BAA8B,YAAc,6BAA6B,SAAW,0BAA0B,SAAW,0BAA0B,aAAe,8BAA8B,kBAAoB,mCAAmC,aAAe,8BAA8B,YAAc,+B,6FCa3mBC,EATK,SAACC,GACjB,OAAO,qBAAKC,UAAWC,IAAEC,KAAO,IAAMD,IAAEE,WAAjC,SACH,sBAAKH,UAAWC,IAAEG,UAAlB,UACI,+BAAM,qBAAKJ,UAAWC,IAAEI,cAAeC,IAAKP,EAAMQ,OAAQC,IAAI,OAC9D,cAAC,IAAD,CAASR,UAAWC,IAAEQ,aAAcC,GAAI,YAAcX,EAAMY,GAA5D,SAAiEZ,EAAMa,aCKpEC,EATC,SAACd,GACb,OAAO,qBAAKC,UAAWC,IAAEa,iBAAlB,SACH,sBAAKd,UAAWC,IAAEc,YAAlB,UACI,qBAAKf,UAAWC,IAAEe,SAAlB,SAA4B,qBAAKhB,UAAWC,IAAEgB,eAAgBX,IAAKP,EAAMQ,OAAQC,IAAI,OACrF,qBAAKR,UAAWC,IAAEiB,aAAlB,SAAiCnB,EAAMoB,gB,yCCkD7CC,EAAeC,YAAiB,KAkBhCC,EAAsBC,YAA+B,CACvDC,KAAM,wBADkBD,EAhB6C,SAACxB,GACtE,OACI,sBAAM0B,SAAU1B,EAAM2B,aAAtB,SACI,sBAAK1B,UAAWC,IAAE0B,kBAAlB,UACI,cAACC,EAAA,EAAD,CAAOC,YAAY,qBACZ7B,UAAWC,IAAE6B,aACblB,KAAM,iBACNmB,UAAWC,IACXC,SAAU,CAACC,IAAed,KAEjC,wBAAQpB,UAAWC,IAAEkC,YAArB,0BAUDC,EAzDC,SAACrC,GAEb,IAAIsC,EAAkBtC,EAAMuC,YAAYC,YAAYC,KAAI,SAACC,GAAD,OACpD,cAAC,EAAD,CAAa9B,GAAI8B,EAAE9B,GAENC,KAAM6B,EAAE7B,KACRL,OAAQkC,EAAElC,QAFLkC,EAAE9B,OAIpB+B,EAAmB3C,EAAMuC,YAAYK,YAAYH,KAAI,SAACI,GAAD,OACrD,cAAC,EAAD,CAASjC,GAAIiC,EAAEjC,GAENQ,QAASyB,EAAEzB,QACXZ,OAAQqC,EAAErC,QAFLqC,EAAEjC,OAQpB,OAAGZ,EAAM8C,OAAe,cAAC,IAAD,CAAUnC,GAAI,UAGlC,8BACI,sBAAKV,UAAWC,IAAE6C,cAAlB,UACI,qBAAK9C,UAAWC,IAAE8C,YAAlB,SACKV,IAEL,qBAAKrC,UAAWC,IAAE+C,SAAlB,SACKN,IAEL,cAACpB,EAAD,CAAqBG,SAfb,SAACwB,GACjBlD,EAAMoC,YAAYc,EAAKC,yB,4CC9BzBC,EAAkB,SAACC,GACrB,MAAO,CACHP,OAAQO,EAAMC,KAAKR,SC6BZS,sBACXC,aAhBkB,SAACH,GACnB,MAAO,CACHd,YAAac,EAAMd,YACnBO,OAAQO,EAAMC,KAAKR,WAIF,SAACW,GACtB,MAAO,CACHrB,YAAa,SAACe,GACNM,EAASC,YAAwBP,UDpB1C,SAA8BQ,GASjC,OAFiCH,YAAQJ,EAARI,EANP,SAACxD,GACvB,IAAK8C,EAAwB9C,EAAxB8C,OAAWc,EAAhB,YAA6B5D,EAA7B,GACA,OAAK8C,EACE,cAACa,EAAD,eAAeC,IADF,cAAC,IAAD,CAAUjD,GAAI,gBCsB3B4C,CAGblB","file":"static/js/4.e1e6b429.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__hZWBw\",\"globalDialogs\":\"Dialogs_globalDialogs__3sQyj\",\"item\":\"Dialogs_item__Va_xN\",\"activeItem\":\"Dialogs_activeItem__3d319\",\"messageItem\":\"Dialogs_messageItem__3e-pP\",\"avatarDialogs\":\"Dialogs_avatarDialogs__XC85Z\",\"avatarMessages\":\"Dialogs_avatarMessages__19isJ\",\"nameOfSender\":\"Dialogs_nameOfSender__2BTm6\",\"dialogsItem\":\"Dialogs_dialogsItem__2kkxs\",\"messages\":\"Dialogs_messages__2OpEa\",\"imgBlock\":\"Dialogs_imgBlock__3gSiM\",\"messageBlock\":\"Dialogs_messageBlock__2J7bt\",\"inputMessageBlock\":\"Dialogs_inputMessageBlock__19DVj\",\"inputMessage\":\"Dialogs_inputMessage__3WCGi\",\"sendMessage\":\"Dialogs_sendMessage__1WGoq\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\nimport {dialogsPropsType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst DialogsItem = (props: dialogsPropsType) => {\r\n    return <div className={s.item + ' ' + s.activeItem}>\r\n        <div className={s.container}>\r\n            <span><img className={s.avatarDialogs} src={props.avatar} alt=''/></span>\r\n            <NavLink className={s.nameOfSender} to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {messagePropsType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst Message = (props: messagePropsType) => {\r\n    return <div className={s.containerMessage}>\r\n        <div className={s.messageItem}>\r\n            <div className={s.imgBlock}><img className={s.avatarMessages} src={props.avatar} alt=''/></div>\r\n            <div className={s.messageBlock}>{props.message}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from \"./DialogItem/DialogItem\";\r\nimport Message from './Message/Message';\r\nimport {dialogsPropsType, messagePropsType} from \"../../redux/dialogs-reducer\";\r\nimport {DialogPageType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Textarea} from \"../common/preloader/formsControl/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessageText: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype AddMessagePropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n    onMessageChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogsData.map((d: dialogsPropsType) =>\r\n        <DialogsItem id={d.id}\r\n                     key={d.id}\r\n                     name={d.name}\r\n                     avatar={d.avatar}/>)\r\n\r\n    let messagesElements = props.dialogsPage.messageData.map((m: messagePropsType) =>\r\n        <Message id={m.id}\r\n                 key={m.id}\r\n                 message={m.message}\r\n                 avatar={m.avatar}/>)\r\n\r\n    let addNewMessage = (data: AddMessagePropsType) => {\r\n        props.sendMessage(data.newMessageText)\r\n    }\r\n\r\n    if(props.isAuth) return <Redirect to={'login'} />\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.globalDialogs}>\r\n                <div className={s.dialogsItem}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessagePropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.inputMessageBlock}>\r\n                <Field placeholder='Enter your message'\r\n                       className={s.inputMessage}\r\n                       name={'newMessageText'}\r\n                       component={Textarea}\r\n                       validate={[requiredField, maxLength100]}\r\n                />\r\n                <button className={s.sendMessage}>SEND</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessagePropsType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React from 'react';\r\nimport {\r\n    addMessageActionCreator,\r\n    dialogsPropsType, messagePropsType,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\nexport type DialogPageType = {\r\n    dialogsData: Array<dialogsPropsType>\r\n    messageData: Array<messagePropsType>\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n                dispatch(addMessageActionCreator(newMessageText));\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}